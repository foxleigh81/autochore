#! /usr/bin/env node

/**
 * This file automatically generates the index registries for all directories specified in `directories` below. It runs automatically when `yarn preflight` runs or you can run it via `yarn genreg`
 */

const fs = require('fs');
const path = require('path');
const camelCase = require('camelcase');

const directories = ['./components', './lib/helpers', './lib/reducers'];

const message = `/***
This file is autogenerated, please do not edit it.
To generate an updated version, please run \`yarn genreg\`

If you register your helper with this index, it can be referenced more easily.

e.g. without registering

  import fetcher from '@helpers/fetcher
  import poster from '@helpers/poster

e.g. with registering

  import { fetcher, poster } from '@helpers/index'
*/`;

const include = '.ts';
const exclude = `index|.spec.ts|.d.ts|.DS_Store|.gitkeep`;

const generateLines = (directory) => {
  const dir = fs
    .readdirSync(path.resolve(directory))
    .filter((file) => !file.match(exclude));

  // If dir is empty, do nothing
  if (dir.length !== 0) {
    return dir
      .map((file) => {
        if (!file.match(include))
          return `export { default as ${camelCase(file, {
            pascalCase: true
          })} } from './${file}';\n`;
        const fileNoExt = file.replace(include, '');
        const varName = camelCase(fileNoExt);
        return `export { default as ${varName} } from './${fileNoExt}';\n`;
      })
      .filter((item) => item)
      .toString()
      .replace(/,/g, '\n');
  } else {
    return '';
  }
};

directories.forEach((directory) => {
  const lines = generateLines(directory);
  const fileContents = `${message}\n\n${lines}`;
  if (lines) {
    fs.writeFileSync(path.resolve(directory, `index.ts`), fileContents);
  }
});
