import {useState } from 'react';
import type { NextPage } from 'next'
import Head from 'next/head'
import { Box, TextField, Select, MenuItem, Button, InputLabel, FormGroup, Checkbox, Grid } from '@mui/material'
import styles from '../styles/Home.module.css'

const Home: NextPage = () => {

  const [name, setName] = useState('')
  const [description, setDescription] = useState('')
  const [effort, setEffort] = useState(0)
  const [assignee, setAssignee] = useState(0)
  const [frequency, setFrequency] = useState('daily')
  const [day, setDay] = useState<number[]|[]>([])
  const [month, setMonth] = useState<number[]|[]>([])
  const [runOn, setRunOn] = useState<string[]|[]>([])

  const days = [
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday',
    'Sunday'
  ]

  // Create an array of months with the month name and month number
  const months = [
    { name: 'January', number: 1, days: 31 },
    { name: 'February', number: 2, days: 28 },
    { name: 'March', number: 3, days: 31 },
    { name: 'April', number: 4, days: 30},
    { name: 'May', number: 5, days: 31 },
    { name: 'June', number: 6, days: 30 },
    { name: 'July', number: 7, days: 31 },
    { name: 'August', number: 8, days: 31 },
    { name: 'September', number: 9, days: 31 },
    { name: 'October', number: 10, days: 30 },
    { name: 'November', number: 11, days: 31 },
    { name: 'December', number: 12, days: 31 }
  ]

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to the chores CMS
        </h1>
        <Box
        component="form"
        sx={{
          '& > :not(style)': { m: 1, width: '70ch' },
        }}
        noValidate
        autoComplete="off"
      >
        <InputLabel htmlFor="task-name">Name</InputLabel>
        <TextField id="task-name" label="Task Name" variant="outlined" onChange={(e) => setName(e.target.value)} />
        <InputLabel htmlFor="description">Description</InputLabel>
        <TextField id="description" label="description" variant="outlined" multiline rows={2} onChange={(e) => setDescription(e.target.value)} />
        <InputLabel htmlFor="effort">Effort</InputLabel>
        <Select
          id="effort"
          value={effort}
          inputProps={{ 'aria-label': 'Without label' }}
          onChange={(e) => setEffort(e.target.value)}
        >
          <MenuItem value={0}>
            <em>Choose effort level</em>
          </MenuItem>
          <MenuItem value={1}>Super easy</MenuItem>
          <MenuItem value={2}>Pretty easy</MenuItem>
          <MenuItem value={3}>Kinda difficult</MenuItem>
          <MenuItem value={4}>Not fun at all</MenuItem>
        </Select><br />
        <InputLabel htmlFor="assignee">Assignee</InputLabel>
        <Select
          id="assignee"
          value={assignee}
          inputProps={{ 'aria-label': 'Without label' }}
          onChange={(e) => setAssignee(e.target.value)}
        >
          <MenuItem value={0}>Unassigned</MenuItem>
          <MenuItem value={16874248}>Alex</MenuItem>
          <MenuItem value={3818316}>Colette</MenuItem>
        </Select><br />
        <InputLabel htmlFor="frequency">Frequency</InputLabel>
        <Select
          id="frequency"
          value={frequency}
          inputProps={{ 'aria-label': 'Without label' }}
          onChange={(e) => setFrequency(e.target.value)}
        >
          <MenuItem value={'daily'}>Daily</MenuItem>
          <MenuItem value={'weekly'}>Weekly</MenuItem>
          <MenuItem value={'monthly'}>Monthly</MenuItem>
          <MenuItem value={'yearly'}>Yearly</MenuItem>
        </Select>
        {
          frequency === 'weekly' && (
            <FormGroup>
              <InputLabel htmlFor="run-on">Run on</InputLabel>
              <Grid container spacing={1} columns={4}>
                {
                  days.map((wd, i) => (
                    <Grid item key={i}>
                      <Checkbox
                        id={`run-on-${i}`}
                        checked={runOn.includes(wd)}
                        onChange={(e) => {
                          if (e.target.checked) {
                            setRunOn([...runOn, wd])
                          } else {
                            setRunOn(runOn.filter(d => d !== wd))
                          }
                        }}
                      />
                      <label htmlFor={`run-on-${i}`}>{wd}</label>
                </Grid>
                  ))
                }
              </Grid>
            </FormGroup>
          )
        }
        {
          frequency === 'monthly' && (
            <>
            <FormGroup >
              <InputLabel htmlFor="select-month">Run on which month(s)</InputLabel>
              <Grid container spacing={1} columns={4}>
                {
                  months.map((m, i) => (
                    <Grid item key={i}>
                      <Checkbox
                        id={`run-on-${i}`}
                        checked={month.includes(m.number)}
                        onChange={(e) => {
                          if (e.target.checked) {
                            setMonth([...month, m.number])
                          } else {
                            setMonth(month.filter(d => d !== m.number))
                          }
                        }
                      } />
                      <label htmlFor={`run-on-${i}`}>{m.name}</label>
                      </Grid>
                  ))
                }
              </Grid>
            </FormGroup>
            {
              month.length > 0 && (
                <FormGroup>
                  <InputLabel htmlFor="select-day">on which day(s)</InputLabel>
                  <Grid container spacing={1} columns={4}>
                    {
                      Array.from({ length: 32 }, (v, i) => i + 1).map((d, i) => (
                        <Grid item key={i}>
                          <Checkbox
                            id={`run-on-${i}`}
                            checked={day.includes(d)}
                            onChange={(e) => {
                              if (e.target.checked) {
                                setDay([...day, d])
                              } else {
                                setDay(day.filter(x => x !== day))
                              }
                            }
                          }
                          />
                          <label htmlFor={`run-on-${i}`}>{i}</label>
                        </Grid>
                      ))                         
                    }
                  </Grid>
                </FormGroup>
              )
            }
            </>
          )
        }
        {
          frequency === 'yearly' && (
            <>
              <Select
                id="month-of-year"
                value={month}
                inputProps={{ 'aria-label': 'Without label' }}
                onChange={(e) => setMonth(e.target.value)}
              >
                {
                  months.map((m, i) => (
                    <MenuItem key={i} value={m.number}>{m.name}</MenuItem>
                  ))
                }
              </Select>
              <Select
                id="day-of-month"
                value={day}
                inputProps={{ 'aria-label': 'Without label' }}
                onChange={(e) => setDay(e.target.value)}
              >
                {
                  Array.from({ length: 31 }, (v, i) => i + 1).map((d, i) => (
                    <MenuItem key={i} value={d}>{d}</MenuItem>
                  ))
                }
              </Select>
            </>
          )
        }

      </Box>
        
      </main>
    </div>
  )
}

export default Home
